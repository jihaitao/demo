<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<document type="com.apple.InterfaceBuilder3.CocoaTouch.Storyboard.XIB" version="1.0" toolsVersion="1938" systemVersion="11C71" targetRuntime="iOS.CocoaTouch.iPad" propertyAccessControl="none" initialViewController="2">
    <dependencies>
        <development defaultVersion="4200" identifier="xcode"/>
        <plugIn identifier="com.apple.InterfaceBuilder.IBCocoaTouchPlugin" version="933"/>
    </dependencies>
    <scenes>
        <scene sceneID="4">
            <objects>
                <placeholder placeholderIdentifier="IBFirstResponder" id="3" sceneMemberID="firstResponder"/>
                <viewController id="2" customClass="ViewController" sceneMemberID="viewController">
                    <view key="view" contentMode="scaleToFill" id="5">
                        <rect key="frame" x="0.0" y="20" width="768" height="1004"/>
                        <autoresizingMask key="autoresizingMask" widthSizable="YES" heightSizable="YES"/>
                        <subviews>
                            <textView clipsSubviews="YES" multipleTouchEnabled="YES" contentMode="scaleToFill" showsHorizontalScrollIndicator="NO" id="Aq5-gJ-y5f" customClass="CUITextViewHighlighting">
                                <rect key="frame" x="0.0" y="0.0" width="768" height="748"/>
                                <autoresizingMask key="autoresizingMask" widthSizable="YES" heightSizable="YES"/>
                                <color key="backgroundColor" red="1" green="1" blue="1" alpha="1" colorSpace="calibratedRGB"/>
                                <string key="text">//
//  CUITextView.m
//  textview
//
//  Created by Volodymyr Boichentsov on 10/22/11.
//  Copyright (c) 2011 www.injoit.com. All rights reserved.
//

#import "CUITextView.h"
#import &lt;Foundation/Foundation.h>
#import &lt;CoreText/CoreText.h>

#import "NSAttributedString+Attributes.h"


@implementation CUITextView

@synthesize draw=_draw;

- (id)initWithFrame:(CGRect)frame
{
    self = [super initWithFrame:frame];
    if (self) {
        // Initialization code
    }
    return self;
}

- (void) awakeFromNib {
        
    _draw = YES;
    [self setAutocapitalizationType:UITextAutocapitalizationTypeNone];
    [self setText:self.text];
    [self setTextColor:[UIColor clearColor]];
    [self setFont:[UIFont fontWithName:@"Menlo" size:14]];
}


- (void)setText:(NSString *)text {
	[super setText:text]; // will call setNeedsDisplay too
	[self resetAttributedText];
}


- (NSMutableAttributedString*) setColor:(UIColor*)color words:(NSArray*)words inText:(NSMutableAttributedString*)mutableAttributedString {
    
    NSUInteger count = 0, length = [mutableAttributedString length];
    NSRange range = NSMakeRange(0, length);
    
    for (NSString *op in words) {
        count = 0, length = [mutableAttributedString length];
        range = NSMakeRange(0, length); 
        while(range.location != NSNotFound)
        {
            range = [[mutableAttributedString string] rangeOfString:op options:0 range:range];
            if(range.location != NSNotFound) {
                [mutableAttributedString setTextColor:color range:NSMakeRange(range.location, [op length])];
                range = NSMakeRange(range.location + range.length, length - (range.location + range.length));
                count++; 
            }
        }
    }
    
    return mutableAttributedString;
}


- (void) coloringText: (NSMutableAttributedString*) mutableAttributedString {
    
    UIColor *opColor = [UIColor colorWithRed:193.f/255.f green:63.f/255.f blue:178.f/255.f alpha:1];
    NSArray *array = [NSArray arrayWithObjects:@"void", @"self", @"while", @"if", @"else", @"for", nil];
    
    [self setColor:opColor words:array inText:mutableAttributedString];
    
    
    NSUInteger count = 0, length = [mutableAttributedString length];
    NSRange range = NSMakeRange(0, length);
    
    opColor = [UIColor colorWithRed:0 green:100/255.f blue:0 alpha:1];
    
    while(range.location != NSNotFound)
    {
        range = [[mutableAttributedString string] rangeOfString:@"//" options:0 range:range];
        if(range.location != NSNotFound) {
            
            NSRange endline_range = NSMakeRange(range.location, length-range.location);
            endline_range = [[mutableAttributedString string] rangeOfString:@"\n" options:0 range:endline_range];
            
            int n_pos = (endline_range.location != NSNotFound)? endline_range.location : length;
            
            int len = (endline_range.location != NSNotFound)? endline_range.location-range.location : length-range.location;
            
            
            
            
            [mutableAttributedString setTextColor:opColor range:NSMakeRange(range.location, len)];
            range = NSMakeRange(n_pos, length - n_pos);
            count++; 
        }
    }
    
}






- (void) resetAttributedText {    

    NSMutableAttributedString* mutableAttributedString = [NSMutableAttributedString attributedStringWithString:self.text];

	[mutableAttributedString setTextColor:[UIColor blackColor]];
    [mutableAttributedString setFont:[UIFont fontWithName:@"Menlo" size:14]];
   
    [self coloringText:mutableAttributedString];
    
    self.attributedText = mutableAttributedString;
}



- (NSAttributedString *) attributedText {
	if (!_attributedText) {
		[self resetAttributedText];
	}
	return [[_attributedText copy] autorelease]; // immutable autoreleased copy
}


- (void) setAttributedText:(NSAttributedString*)attributedText {
	[_attributedText release];
	_attributedText = [attributedText mutableCopy];
	[self setNeedsDisplay];
}


- (void) resetTextFrame {
	if (textFrame) {
		CFRelease(textFrame);
		textFrame = NULL;
	}
}

- (void) setNeedsDisplay {
	[self resetTextFrame];
	[super setNeedsDisplay];
}


- (void)drawRect:(CGRect)aRect {
    
    if (!_draw) {
        return;
    }
    
    CGRect r = self.bounds;
    r.origin.y = self.contentOffset.y;
    r.size.height = self.contentSize.height;
    [[UIColor clearColor] setFill];
	if (_attributedText) {
		CGContextRef ctx = UIGraphicsGetCurrentContext();
		CGContextSaveGState(ctx);
		
		// flipping the context to draw core text
		// no need to flip our typographical bounds from now on
		CGContextConcatCTM(ctx, CGAffineTransformScale(CGAffineTransformMakeTranslation(0, r.size.height+6.5), 1.f, -1.f));

        
        NSMutableAttributedString* attrStrWithLinks = [self.attributedText mutableCopy];
        
		if (textFrame == NULL) {
			CTFramesetterRef framesetter = CTFramesetterCreateWithAttributedString((CFAttributedStringRef)attrStrWithLinks);

			drawingRect = CGRectMake(0, 0, self.bounds.size.width-8, r.size.height);
            
            
			CGMutablePathRef path = CGPathCreateMutable();
			CGPathAddRect(path, NULL, drawingRect);

			textFrame = CTFramesetterCreateFrame(framesetter,CFRangeMake(0,0), path, NULL);
            
			CGPathRelease(path);
			CFRelease(framesetter);
		}
		
		
		CTFrameDraw(textFrame, ctx);
        
		CGContextRestoreGState(ctx);
    }
    [super drawRect:aRect];
}







/*
// Only override drawRect: if you perform custom drawing.
// An empty implementation adversely affects performance during animation.
- (void)drawRect:(CGRect)rect
{
    // Drawing code
}
*/

@end
</string>
                                <fontDescription key="fontDescription" type="system" pointSize="14"/>
                                <textInputTraits key="textInputTraits" autocapitalizationType="sentences"/>
                                <connections>
                                    <outlet property="delegate" destination="2" id="nJy-Ca-R3q"/>
                                </connections>
                            </textView>
                            <switch opaque="NO" contentMode="scaleToFill" contentHorizontalAlignment="center" contentVerticalAlignment="center" id="06X-Ds-SdN">
                                <rect key="frame" x="669" y="10" width="79" height="27"/>
                                <autoresizingMask key="autoresizingMask" flexibleMinX="YES" flexibleMaxY="YES"/>
                                <connections>
                                    <action selector="showtext" destination="2" eventType="valueChanged" id="F1h-M1-ElJ"/>
                                </connections>
                            </switch>
                            <switch opaque="NO" contentMode="scaleToFill" contentHorizontalAlignment="center" contentVerticalAlignment="center" on="YES" id="mhD-zc-OIM">
                                <rect key="frame" x="669" y="45" width="79" height="27"/>
                                <autoresizingMask key="autoresizingMask" flexibleMinX="YES" flexibleMaxY="YES"/>
                                <connections>
                                    <action selector="draw" destination="2" eventType="valueChanged" id="ZiK-zk-lnu"/>
                                </connections>
                            </switch>
                            <stepper opaque="NO" clipsSubviews="YES" contentMode="scaleToFill" contentHorizontalAlignment="center" contentVerticalAlignment="center" value="14" minimumValue="10" maximumValue="20" id="kZT-Cv-Jr0">
                                <rect key="frame" x="661" y="80" width="94" height="27"/>
                                <autoresizingMask key="autoresizingMask" flexibleMinX="YES" flexibleMaxY="YES"/>
                                <connections>
                                    <action selector="setSize:" destination="2" eventType="valueChanged" id="fQ4-9F-jPa"/>
                                </connections>
                            </stepper>
                            <label opaque="NO" clipsSubviews="YES" userInteractionEnabled="NO" contentMode="left" text="14" textAlignment="center" lineBreakMode="tailTruncation" minimumFontSize="10" id="9CP-ZK-Tww">
                                <rect key="frame" x="687" y="121" width="42" height="21"/>
                                <autoresizingMask key="autoresizingMask" flexibleMinX="YES" flexibleMaxY="YES"/>
                                <fontDescription key="fontDescription" type="system" pointSize="17"/>
                                <color key="textColor" cocoaTouchSystemColor="darkTextColor"/>
                                <nil key="highlightedColor"/>
                            </label>
                        </subviews>
                        <color key="backgroundColor" white="1" alpha="1" colorSpace="custom" customColorSpace="calibratedWhite"/>
                    </view>
                    <connections>
                        <outlet property="cTextView" destination="Aq5-gJ-y5f" id="ce0-pq-O6y"/>
                        <outlet property="lbl" destination="9CP-ZK-Tww" id="w0i-cE-s6z"/>
                    </connections>
                </viewController>
            </objects>
            <point key="canvasLocation" x="-29" y="-444"/>
        </scene>
    </scenes>
    <classes>
        <class className="CUITextView" superclassName="UITextView">
            <source key="sourceIdentifier" type="project" relativePath="./Classes/CUITextView.h"/>
        </class>
        <class className="CUITextViewHighlighting" superclassName="CUITextView">
            <source key="sourceIdentifier" type="project" relativePath="./Classes/CUITextViewHighlighting.h"/>
        </class>
        <class className="ViewController" superclassName="UIViewController">
            <source key="sourceIdentifier" type="project" relativePath="./Classes/ViewController.h"/>
            <relationships>
                <relationship kind="action" name="draw"/>
                <relationship kind="action" name="showtext"/>
                <relationship kind="outlet" name="cTextView" candidateClass="CUITextViewHighlighting"/>
                <relationship kind="outlet" name="lbl" candidateClass="UILabel"/>
            </relationships>
        </class>
    </classes>
    <simulatedMetricsContainer key="defaultSimulatedMetrics">
        <simulatedStatusBarMetrics key="statusBar" statusBarStyle="blackTranslucent"/>
        <simulatedOrientationMetrics key="orientation"/>
        <simulatedScreenMetrics key="destination"/>
    </simulatedMetricsContainer>
</document>